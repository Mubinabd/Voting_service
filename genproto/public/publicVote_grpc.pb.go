// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: publicVote.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PublicVoteService_Create_FullMethodName = "/protos.PublicVoteService/Create"
	PublicVoteService_GetAll_FullMethodName = "/protos.PublicVoteService/GetAll"
)

// PublicVoteServiceClient is the client API for PublicVoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicVoteServiceClient interface {
	Create(ctx context.Context, in *CreatePublicVoteReq, opts ...grpc.CallOption) (*Void, error)
	GetAll(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*PublicVotesGetAllResp, error)
}

type publicVoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicVoteServiceClient(cc grpc.ClientConnInterface) PublicVoteServiceClient {
	return &publicVoteServiceClient{cc}
}

func (c *publicVoteServiceClient) Create(ctx context.Context, in *CreatePublicVoteReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, PublicVoteService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicVoteServiceClient) GetAll(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*PublicVotesGetAllResp, error) {
	out := new(PublicVotesGetAllResp)
	err := c.cc.Invoke(ctx, PublicVoteService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicVoteServiceServer is the server API for PublicVoteService service.
// All implementations must embed UnimplementedPublicVoteServiceServer
// for forward compatibility
type PublicVoteServiceServer interface {
	Create(context.Context, *CreatePublicVoteReq) (*Void, error)
	GetAll(context.Context, *Filter) (*PublicVotesGetAllResp, error)
	mustEmbedUnimplementedPublicVoteServiceServer()
}

// UnimplementedPublicVoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPublicVoteServiceServer struct {
}

func (UnimplementedPublicVoteServiceServer) Create(context.Context, *CreatePublicVoteReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPublicVoteServiceServer) GetAll(context.Context, *Filter) (*PublicVotesGetAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedPublicVoteServiceServer) mustEmbedUnimplementedPublicVoteServiceServer() {}

// UnsafePublicVoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicVoteServiceServer will
// result in compilation errors.
type UnsafePublicVoteServiceServer interface {
	mustEmbedUnimplementedPublicVoteServiceServer()
}

func RegisterPublicVoteServiceServer(s grpc.ServiceRegistrar, srv PublicVoteServiceServer) {
	s.RegisterService(&PublicVoteService_ServiceDesc, srv)
}

func _PublicVoteService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePublicVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicVoteServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicVoteService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicVoteServiceServer).Create(ctx, req.(*CreatePublicVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicVoteService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicVoteServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicVoteService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicVoteServiceServer).GetAll(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicVoteService_ServiceDesc is the grpc.ServiceDesc for PublicVoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicVoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.PublicVoteService",
	HandlerType: (*PublicVoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PublicVoteService_Create_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _PublicVoteService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publicVote.proto",
}
